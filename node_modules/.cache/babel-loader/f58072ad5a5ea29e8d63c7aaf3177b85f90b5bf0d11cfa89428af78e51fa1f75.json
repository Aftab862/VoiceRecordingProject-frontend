{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   useEffect(() => {\n//     fetchRecordings();\n//   }, []);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//     const onSave = async () => {\n//       try {\n//         const formData = new FormData();\n//         chunksRef.current.forEach((chunk, index) => {\n//           formData.append('recording', chunk, `recording${index}.webm`);\n//         });\n//         const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//           headers: { 'Content-Type': 'multipart/form-data' },\n//         });\n\n//         setRecordings(prevRecordings => [...prevRecordings, response.data]);\n//         chunksRef.current = [];\n//       } catch (error) {\n//         console.error('Failed to save the recording:', error);\n//       }\n//     };\n\n//   const fetchRecordings = async () => {\n//         try {\n//           const response = await fetch('http://localhost:5000/api/recordings');\n//           if (response.ok) {\n//             const data = await response.json();\n//             setRecordings(data);\n//           } else {\n//             throw new Error('Failed to fetch the recordings');\n//           }\n//         } catch (error) {\n//           console.error('Failed to fetch the recordings:', error);\n//         }\n//       };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n//     console.log(\"recordings\",recordings)\n\n//     return (\n//       <ul>\n\n//         {recordings.map((recording, index) => (\n//           <li key={index}>\n//              <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {chunksRef.current.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   useEffect(() => {\n//     fetchRecordings();\n//   }, []);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//         onSave(); \n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append('recording', chunk, `recording${index}.webm`);\n//       });\n\n//       const response = await fetch('http://localhost:5000/api/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(prevRecordings => [...prevRecordings, data]);\n//         chunksRef.current = [];\n//         fetchRecordings(); \n//       } else {\n//         throw new Error('Failed to save the recording');\n//       }\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n\n//     return (\n//       <ul>\n//         {recordings.map((recording, index) => (\n//           <li key={index} >\n//             <audio controls src={`http://localhost:5000/${recording?.path}`} />\n//             <button className='button' onClick={() => handleDelete(recording?._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   const handleDelete = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/delete/${id}`);\n//       fetchRecordings(); \n//     } catch (error) {\n//       console.error('Failed to delete the recording:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button className='start-button' onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button className='start-button' onClick={stopRecording}>Stop Recording</button>\n//       )}\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  useEffect(() => {\n    fetchRecordings();\n  }, []);\n  useEffect(() => {\n    let interval;\n    if (isRecording) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n      setTimer(0);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isRecording]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new RecordRTC(stream, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        chunksRef.current.push(blob);\n        setIsRecording(false);\n        onSave(); // Call onSave after the recording has stopped\n      });\n    }\n  };\n\n  const onSave = async () => {\n    // Rest of your code remains the same...\n  };\n  const fetchRecordings = async () => {\n    // Rest of your code remains the same...\n  };\n  const renderRecordingsList = () => {\n    // Rest of your code remains the same...\n  };\n  const handleDelete = async id => {\n    // Rest of your code remains the same...\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: isRecording ? timer : 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-button\",\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-button\",\n      onClick: stopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), renderRecordingsList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ijw6EORK/sEMCMqIMrddkV4aWDo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","RecordRTC","axios","jsxDEV","_jsxDEV","App","_s","recordings","setRecordings","isRecording","setIsRecording","timer","setTimer","mediaRecorderRef","chunksRef","fetchRecordings","interval","setInterval","prevTimer","clearInterval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","type","mimeType","error","console","stopRecording","blob","getBlob","push","onSave","renderRecordingsList","handleDelete","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   useEffect(() => {\n//     fetchRecordings();\n//   }, []);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//     const onSave = async () => {\n//       try {\n//         const formData = new FormData();\n//         chunksRef.current.forEach((chunk, index) => {\n//           formData.append('recording', chunk, `recording${index}.webm`);\n//         });\n//         const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//           headers: { 'Content-Type': 'multipart/form-data' },\n//         });\n\n//         setRecordings(prevRecordings => [...prevRecordings, response.data]);\n//         chunksRef.current = [];\n//       } catch (error) {\n//         console.error('Failed to save the recording:', error);\n//       }\n//     };\n\n\n//   const fetchRecordings = async () => {\n//         try {\n//           const response = await fetch('http://localhost:5000/api/recordings');\n//           if (response.ok) {\n//             const data = await response.json();\n//             setRecordings(data);\n//           } else {\n//             throw new Error('Failed to fetch the recordings');\n//           }\n//         } catch (error) {\n//           console.error('Failed to fetch the recordings:', error);\n//         }\n//       };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n//     console.log(\"recordings\",recordings)\n\n//     return (\n//       <ul>\n\n//         {recordings.map((recording, index) => (\n//           <li key={index}>\n//              <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {chunksRef.current.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   useEffect(() => {\n//     fetchRecordings();\n//   }, []);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//         onSave(); \n//       });\n//     }\n//   };\n\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append('recording', chunk, `recording${index}.webm`);\n//       });\n\n//       const response = await fetch('http://localhost:5000/api/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(prevRecordings => [...prevRecordings, data]);\n//         chunksRef.current = [];\n//         fetchRecordings(); \n//       } else {\n//         throw new Error('Failed to save the recording');\n//       }\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n\n//     return (\n//       <ul>\n//         {recordings.map((recording, index) => (\n//           <li key={index} >\n//             <audio controls src={`http://localhost:5000/${recording?.path}`} />\n//             <button className='button' onClick={() => handleDelete(recording?._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n\n\n//   const handleDelete = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/delete/${id}`);\n//       fetchRecordings(); \n//     } catch (error) {\n//       console.error('Failed to delete the recording:', error);\n//     }\n//   };\n\n\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button className='start-button' onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button className='start-button' onClick={stopRecording}>Stop Recording</button>\n//       )}\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n\n\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport axios from 'axios';\n\nimport './App.css';\n\nfunction App() {\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  useEffect(() => {\n    fetchRecordings();\n  }, []);\n\n  useEffect(() => {\n    let interval;\n\n    if (isRecording) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n      setTimer(0);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isRecording]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new RecordRTC(stream, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        chunksRef.current.push(blob);\n        setIsRecording(false);\n        onSave(); // Call onSave after the recording has stopped\n      });\n    }\n  };\n\n  const onSave = async () => {\n    // Rest of your code remains the same...\n  };\n\n  const fetchRecordings = async () => {\n    // Rest of your code remains the same...\n  };\n\n  const renderRecordingsList = () => {\n    // Rest of your code remains the same...\n  };\n\n  const handleDelete = async (id) => {\n    // Rest of your code remains the same...\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Voice Recording Demo</h1>\n\n      <h2>Record:</h2>\n      <div className=\"timer\">{isRecording ? timer : 0}</div>\n      {!isRecording ? (\n        <button className=\"start-button\" onClick={startRecording}>\n          Start Recording\n        </button>\n      ) : (\n        <button className=\"start-button\" onClick={stopRecording}>\n          Stop Recording\n        </button>\n      )}\n\n      <h2>Recordings:</h2>\n      {renderRecordingsList()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAAC,SAAAC,MAAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}