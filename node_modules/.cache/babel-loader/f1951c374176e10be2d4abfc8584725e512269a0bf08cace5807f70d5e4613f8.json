{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport MicRecorder from 'react-mic-recorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n  const onStartRecording = () => {\n    setIsRecording(true);\n  };\n  const onStopRecording = recordedBlob => {\n    setIsRecording(false);\n    setRecordings(prevRecordings => [...prevRecordings, recordedBlob]);\n  };\n  const onDeleteRecording = index => {\n    setRecordings(prevRecordings => {\n      const updatedRecordings = [...prevRecordings];\n      updatedRecordings.splice(index, 1);\n      return updatedRecordings;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recordings.map((recording, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: URL.createObjectURL(recording.blob)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onDeleteRecording(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsRecording(false),\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MicRecorder, {\n      record: isRecording,\n      onStop: onStopRecording,\n      mimeType: \"audio/wav\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"L6RUAW/ff04CiPY9O3LR3Xy4S4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MicRecorder","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","recordings","setRecordings","onStartRecording","onStopRecording","recordedBlob","prevRecordings","onDeleteRecording","index","updatedRecordings","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","map","recording","controls","src","URL","createObjectURL","blob","onClick","disabled","record","onStop","mimeType","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport MicRecorder from 'react-mic-recorder';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n\n  const onStartRecording = () => {\n    setIsRecording(true);\n  };\n\n  const onStopRecording = (recordedBlob) => {\n    setIsRecording(false);\n    setRecordings(prevRecordings => [...prevRecordings, recordedBlob]);\n  };\n\n  const onDeleteRecording = (index) => {\n    setRecordings(prevRecordings => {\n      const updatedRecordings = [...prevRecordings];\n      updatedRecordings.splice(index, 1);\n      return updatedRecordings;\n    });\n  };\n\n  return (\n    <div>\n      <h1>Voice Recording Demo</h1>\n\n      <h2>Recordings:</h2>\n      <ul>\n        {recordings.map((recording, index) => (\n          <li key={index}>\n            <audio controls src={URL.createObjectURL(recording.blob)} />\n            <button onClick={() => onDeleteRecording(index)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n\n      <h2>Record:</h2>\n      <button onClick={onStartRecording} disabled={isRecording}>\n        Start Recording\n      </button>\n      <button onClick={() => setIsRecording(false)} disabled={!isRecording}>\n        Stop Recording\n      </button>\n\n      <MicRecorder\n        record={isRecording}\n        onStop={onStopRecording}\n        mimeType=\"audio/wav\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}