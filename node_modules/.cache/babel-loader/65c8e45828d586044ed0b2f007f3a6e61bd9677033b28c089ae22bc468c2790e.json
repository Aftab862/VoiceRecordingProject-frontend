{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//===================================\n\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import './App.css';\n\n// function App() {\n//   const [isRecording, setIsRecording] = useState(false);\n//   const [recordings, setRecordings] = useState([]);\n\n//   const mediaRecorderRef = useRef(null);\n//   const streamRef = useRef(null);\n\n//   const startRecording = async () => {\n//     try {\n//       streamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(streamRef.current, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         const blobURL = URL.createObjectURL(blob);\n//         setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n//       });\n//       setIsRecording(false);\n//     }\n//   };\n\n//   const saveRecording = async (recordingURL) => {\n//     console.log('Saving recording:', recordingURL);\n\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"app-title\">Voice Recording Demo</h1>\n\n//       <div className=\"recordings-container\">\n//         <h2 className=\"recordings-title\">Unsaved Recordings:</h2>\n//         <ul className=\"recordings-list\">\n//           {console.log(\"reco\", recordings.length)}\n//           {recordings.map((recording, index) => (\n//             <li key={index} className=\"recording-item\">\n//               <audio controls src={recording} className=\"recording-audio\" />\n//               <button\n//                 className=\"save-button\"\n//                 onClick={() => saveRecording(recording)}\n//               >\n//                 Save\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"record-button-container\">\n//         <h2 className=\"record-title\">Record:</h2>\n//         {isRecording ? (\n//           <button className=\"stop-button\" onClick={stopRecording}>\n//             Stop Recording\n//           </button>\n//         ) : (\n//           <button className=\"start-button\" onClick={startRecording}>\n//             Start Recording\n//           </button>\n//         )}\n//       </div>\n//       <div>\n\n//       </div>\n\n//       <button className=\"fetch-button\" onClick={startRecording}>\n//         Fetch Recordings\n//       </button>\n//       <ul className=\"recordings-list\">\n//         {console.log(\"reco\", recordings.length)}\n//         {recordings.map((recording, index) => (\n//           <li key={index} className=\"recording-item\">\n//             <audio controls src={recording} className=\"recording-audio\" />\n//             <button\n//               className=\"save-button\"\n//               onClick={() => saveRecording(recording)}\n//             >\n//               Save\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // ================\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording}>Start Recording</button>\n//       <button onClick={stopRecording}>Stop Recording</button>\n//       <button onClick={onSave}>Save Recording</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// ==================================\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {recordings.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n// ====================================\n\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [...prevRecordings, response.data]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n\n//     return (\n//       <ul>\n//         {recordings.map((recording, index) => (\n//           <li key={index}>\n//             <audio controls src={recording.path} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {recordings.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// ===========================================import React, { useState, useEffect } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioSource, setAudioSource] = useState('');\n  useEffect(() => {\n    fetchRecordings();\n  }, []);\n  const fetchRecordings = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/recordings');\n      setRecordings(response.data);\n    } catch (error) {\n      console.error('Failed to fetch the recordings:', error);\n    }\n  };\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n  const handleAudioSourceChange = event => {\n    setAudioSource(URL.createObjectURL(event.target.files[0]));\n  };\n  const onSave = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('recording', audioSource);\n      const response = await axios.post('http://localhost:5000/api/recordings', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setRecordings(prevRecordings => [...prevRecordings, response.data]);\n      setAudioSource('');\n    } catch (error) {\n      console.error('Failed to save the recording:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), recordings.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recordings.map(recording => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: `http://localhost:5000/${recording.path}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: recording.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 15\n        }, this)]\n      }, recording._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No recordings available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"audio/*\",\n        onChange: handleAudioSourceChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startRecording,\n        disabled: !audioSource,\n        children: \"Start Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onSave,\n        disabled: !audioSource,\n        children: \"Save Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TulmyvczI+5/HyXiYYH+Wv2N0mc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","recordings","setRecordings","isRecording","setIsRecording","audioSource","setAudioSource","fetchRecordings","response","get","data","error","console","startRecording","stopRecording","handleAudioSourceChange","event","URL","createObjectURL","target","files","onSave","formData","FormData","append","post","headers","prevRecordings","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","recording","controls","src","path","filename","_id","type","accept","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n//===================================\n\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import './App.css';\n\n// function App() {\n//   const [isRecording, setIsRecording] = useState(false);\n//   const [recordings, setRecordings] = useState([]);\n\n//   const mediaRecorderRef = useRef(null);\n//   const streamRef = useRef(null);\n\n//   const startRecording = async () => {\n//     try {\n//       streamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(streamRef.current, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         const blobURL = URL.createObjectURL(blob);\n//         setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n//       });\n//       setIsRecording(false);\n//     }\n//   };\n\n//   const saveRecording = async (recordingURL) => {\n//     console.log('Saving recording:', recordingURL);\n\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"app-title\">Voice Recording Demo</h1>\n\n//       <div className=\"recordings-container\">\n//         <h2 className=\"recordings-title\">Unsaved Recordings:</h2>\n//         <ul className=\"recordings-list\">\n//           {console.log(\"reco\", recordings.length)}\n//           {recordings.map((recording, index) => (\n//             <li key={index} className=\"recording-item\">\n//               <audio controls src={recording} className=\"recording-audio\" />\n//               <button\n//                 className=\"save-button\"\n//                 onClick={() => saveRecording(recording)}\n//               >\n//                 Save\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"record-button-container\">\n//         <h2 className=\"record-title\">Record:</h2>\n//         {isRecording ? (\n//           <button className=\"stop-button\" onClick={stopRecording}>\n//             Stop Recording\n//           </button>\n//         ) : (\n//           <button className=\"start-button\" onClick={startRecording}>\n//             Start Recording\n//           </button>\n//         )}\n//       </div>\n//       <div>\n\n//       </div>\n\n//       <button className=\"fetch-button\" onClick={startRecording}>\n//         Fetch Recordings\n//       </button>\n//       <ul className=\"recordings-list\">\n//         {console.log(\"reco\", recordings.length)}\n//         {recordings.map((recording, index) => (\n//           <li key={index} className=\"recording-item\">\n//             <audio controls src={recording} className=\"recording-audio\" />\n//             <button\n//               className=\"save-button\"\n//               onClick={() => saveRecording(recording)}\n//             >\n//               Save\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// // ================\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording}>Start Recording</button>\n//       <button onClick={stopRecording}>Stop Recording</button>\n//       <button onClick={onSave}>Save Recording</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// ==================================\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {recordings.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n// ====================================\n\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [...prevRecordings, response.data]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n\n//     return (\n//       <ul>\n//         {recordings.map((recording, index) => (\n//           <li key={index}>\n//             <audio controls src={recording.path} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {recordings.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// ===========================================import React, { useState, useEffect } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nfunction App() {\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioSource, setAudioSource] = useState('');\n\n  useEffect(() => {\n    fetchRecordings();\n  }, []);\n\n  const fetchRecordings = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/recordings');\n      setRecordings(response.data);\n    } catch (error) {\n      console.error('Failed to fetch the recordings:', error);\n    }\n  };\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  const handleAudioSourceChange = (event) => {\n    setAudioSource(URL.createObjectURL(event.target.files[0]));\n  };\n\n  const onSave = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('recording', audioSource);\n      const response = await axios.post('http://localhost:5000/api/recordings', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n\n      setRecordings(prevRecordings => [...prevRecordings, response.data]);\n      setAudioSource('');\n    } catch (error) {\n      console.error('Failed to save the recording:', error);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Voice Recording Demo</h1>\n\n      <h2>Recordings:</h2>\n      {recordings.length > 0 ? (\n        <ul>\n          {recordings.map(recording => (\n            <li key={recording._id}>\n              <audio controls src={`http://localhost:5000/${recording.path}`} />\n              <p>{recording.filename}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No recordings available.</p>\n      )}\n\n      <h2>Record:</h2>\n      {!isRecording ? (\n        <>\n          <input type=\"file\" accept=\"audio/*\" onChange={handleAudioSourceChange} />\n          <button onClick={startRecording} disabled={!audioSource}>Start Recording</button>\n        </>\n      ) : (\n        <>\n          <button onClick={stopRecording}>Stop Recording</button>\n          <button onClick={onSave} disabled={!audioSource}>Save Recording</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}