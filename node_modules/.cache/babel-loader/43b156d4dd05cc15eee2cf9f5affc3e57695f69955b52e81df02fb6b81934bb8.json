{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//===================================\n\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import './App.css';\n\n// function App() {\n//   const [isRecording, setIsRecording] = useState(false);\n//   const [recordings, setRecordings] = useState([]);\n\n//   const mediaRecorderRef = useRef(null);\n//   const streamRef = useRef(null);\n\n//   const startRecording = async () => {\n//     try {\n//       streamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(streamRef.current, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         const blobURL = URL.createObjectURL(blob);\n//         setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n//       });\n//       setIsRecording(false);\n//     }\n//   };\n\n//   const saveRecording = async (recordingURL) => {\n//     console.log('Saving recording:', recordingURL);\n\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"app-title\">Voice Recording Demo</h1>\n\n//       <div className=\"recordings-container\">\n//         <h2 className=\"recordings-title\">Unsaved Recordings:</h2>\n//         <ul className=\"recordings-list\">\n//           {console.log(\"reco\", recordings.length)}\n//           {recordings.map((recording, index) => (\n//             <li key={index} className=\"recording-item\">\n//               <audio controls src={recording} className=\"recording-audio\" />\n//               <button\n//                 className=\"save-button\"\n//                 onClick={() => saveRecording(recording)}\n//               >\n//                 Save\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"record-button-container\">\n//         <h2 className=\"record-title\">Record:</h2>\n//         {isRecording ? (\n//           <button className=\"stop-button\" onClick={stopRecording}>\n//             Stop Recording\n//           </button>\n//         ) : (\n//           <button className=\"start-button\" onClick={startRecording}>\n//             Start Recording\n//           </button>\n//         )}\n//       </div>\n//       <div>\n\n//       </div>\n\n//       <button className=\"fetch-button\" onClick={startRecording}>\n//         Fetch Recordings\n//       </button>\n//       <ul className=\"recordings-list\">\n//         {console.log(\"reco\", recordings.length)}\n//         {recordings.map((recording, index) => (\n//           <li key={index} className=\"recording-item\">\n//             <audio controls src={recording} className=\"recording-audio\" />\n//             <button\n//               className=\"save-button\"\n//               onClick={() => saveRecording(recording)}\n//             >\n//               Save\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// // ================\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording}>Start Recording</button>\n//       <button onClick={stopRecording}>Stop Recording</button>\n//       <button onClick={onSave}>Save Recording</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// ==================================\nimport React, { useState, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new RecordRTC(stream, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        chunksRef.current.push(blob);\n        setIsRecording(false);\n      });\n    }\n  };\n  const onSave = async () => {\n    try {\n      const formData = new FormData();\n      chunksRef.current.forEach((chunk, index) => {\n        formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n      });\n      const response = await axios.post('http://localhost:5000/api/upload', formData);\n      setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n      chunksRef.current = [];\n    } catch (error) {\n      console.error('Failed to save the recording:', error);\n    }\n  };\n  const fetchRecordings = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/recordings');\n      if (response.ok) {\n        const data = await response.json();\n        setRecordings(data);\n      } else {\n        throw new Error('Failed to fetch the recordings');\n      }\n    } catch (error) {\n      console.error('Failed to fetch the recordings:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchRecordings,\n      children: \"Fetch Recordings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recordings.map(recording => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: `http://localhost:5000/${recording.path}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: recording.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)]\n      }, recording._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this), recordings.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSave,\n      children: \"Save Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ed3JiqInhFLuMkpScvaNuupojms=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","RecordRTC","axios","jsxDEV","_jsxDEV","App","_s","recordings","setRecordings","isRecording","setIsRecording","mediaRecorderRef","chunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","type","mimeType","error","console","stopRecording","blob","getBlob","push","onSave","formData","FormData","forEach","chunk","index","append","response","post","prevRecordings","data","fetchRecordings","fetch","ok","json","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","recording","controls","src","path","filename","_id","length","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n//===================================\n\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import './App.css';\n\n// function App() {\n//   const [isRecording, setIsRecording] = useState(false);\n//   const [recordings, setRecordings] = useState([]);\n\n//   const mediaRecorderRef = useRef(null);\n//   const streamRef = useRef(null);\n\n//   const startRecording = async () => {\n//     try {\n//       streamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(streamRef.current, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         const blobURL = URL.createObjectURL(blob);\n//         setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n//       });\n//       setIsRecording(false);\n//     }\n//   };\n\n//   const saveRecording = async (recordingURL) => {\n//     console.log('Saving recording:', recordingURL);\n  \n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"app-title\">Voice Recording Demo</h1>\n\n//       <div className=\"recordings-container\">\n//         <h2 className=\"recordings-title\">Unsaved Recordings:</h2>\n//         <ul className=\"recordings-list\">\n//           {console.log(\"reco\", recordings.length)}\n//           {recordings.map((recording, index) => (\n//             <li key={index} className=\"recording-item\">\n//               <audio controls src={recording} className=\"recording-audio\" />\n//               <button\n//                 className=\"save-button\"\n//                 onClick={() => saveRecording(recording)}\n//               >\n//                 Save\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"record-button-container\">\n//         <h2 className=\"record-title\">Record:</h2>\n//         {isRecording ? (\n//           <button className=\"stop-button\" onClick={stopRecording}>\n//             Stop Recording\n//           </button>\n//         ) : (\n//           <button className=\"start-button\" onClick={startRecording}>\n//             Start Recording\n//           </button>\n//         )}\n//       </div>\n//       <div>\n\n//       </div>\n\n//       <button className=\"fetch-button\" onClick={startRecording}>\n//         Fetch Recordings\n//       </button>\n//       <ul className=\"recordings-list\">\n//         {console.log(\"reco\", recordings.length)}\n//         {recordings.map((recording, index) => (\n//           <li key={index} className=\"recording-item\">\n//             <audio controls src={recording} className=\"recording-audio\" />\n//             <button\n//               className=\"save-button\"\n//               onClick={() => saveRecording(recording)}\n//             >\n//               Save\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n// // ================\n// import React, { useState, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//       });\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const formData = new FormData();\n//       chunksRef.current.forEach((chunk, index) => {\n//         formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n//       });\n//       const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording}>Start Recording</button>\n//       <button onClick={stopRecording}>Stop Recording</button>\n//       <button onClick={onSave}>Save Recording</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n// ==================================\nimport React, { useState, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport axios from 'axios';\n\nimport './App.css';\n\nfunction App() {\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new RecordRTC(stream, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        chunksRef.current.push(blob);\n        setIsRecording(false);\n      });\n    }\n  };\n\n  const onSave = async () => {\n    try {\n      const formData = new FormData();\n      chunksRef.current.forEach((chunk, index) => {\n        formData.append(`recording${index}`, chunk, `recording${index}.webm`);\n      });\n      const response = await axios.post('http://localhost:5000/api/upload', formData);\n\n      setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n      chunksRef.current = [];\n    } catch (error) {\n      console.error('Failed to save the recording:', error);\n    }\n  };\n\n  const fetchRecordings = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/recordings');\n      if (response.ok) {\n        const data = await response.json();\n        setRecordings(data);\n      } else {\n        throw new Error('Failed to fetch the recordings');\n      }\n    } catch (error) {\n      console.error('Failed to fetch the recordings:', error);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Voice Recording Demo</h1>\n\n      <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n      <h2>Recordings:</h2>\n      <ul>\n        {recordings.map(recording => (\n          <li key={recording._id}>\n            <audio controls src={`http://localhost:5000/${recording.path}`} />\n            <p>{recording.filename}</p>\n          </li>\n        ))}\n      </ul>\n\n      <h2>Record:</h2>\n      {!isRecording ? (\n        <button onClick={startRecording}>Start Recording</button>\n      ) : (\n        <button onClick={stopRecording}>Stop Recording</button>\n      )}\n      {recordings.length > 0 && (\n        <button onClick={onSave}>Save Recording</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}