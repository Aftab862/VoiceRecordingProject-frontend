{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport ReactMic from 'react-mic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n  const onStartRecording = () => {\n    setIsRecording(true);\n  };\n  const onStopRecording = recordedBlob => {\n    setIsRecording(false);\n    const blobURL = URL.createObjectURL(recordedBlob.blob);\n    setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recordings.map((recording, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: recording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onStartRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsRecording(false),\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactMic, {\n      record: isRecording,\n      onStop: onStopRecording,\n      mimeType: \"audio/mp3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"L6RUAW/ff04CiPY9O3LR3Xy4S4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactMic","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isRecording","setIsRecording","recordings","setRecordings","onStartRecording","onStopRecording","recordedBlob","blobURL","URL","createObjectURL","blob","prevRecordings","children","fileName","_jsxFileName","lineNumber","columnNumber","map","recording","index","controls","src","onClick","disabled","record","onStop","mimeType","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport ReactMic from 'react-mic';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n\n  const onStartRecording = () => {\n    setIsRecording(true);\n  };\n\n  const onStopRecording = (recordedBlob) => {\n    setIsRecording(false);\n    const blobURL = URL.createObjectURL(recordedBlob.blob);\n    setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n  };\n\n  return (\n    <>\n      <h1>Voice Recording Demo</h1>\n\n      <h2>Recordings:</h2>\n      <ul>\n        {recordings.map((recording, index) => (\n          <li key={index}>\n            <audio controls src={recording} />\n          </li>\n        ))}\n      </ul>\n\n      <h2>Record:</h2>\n      <button onClick={onStartRecording} disabled={isRecording}>\n        Start Recording\n      </button>\n      <button onClick={() => setIsRecording(false)} disabled={!isRecording}>\n        Stop Recording\n      </button>\n\n      <ReactMic\n        record={isRecording}\n        onStop={onStopRecording}\n        mimeType=\"audio/mp3\"\n      />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}