{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport { Box, Heading, Button, UnorderedList, ListItem, Audio } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const startRecording = async () => {\n    try {\n      streamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new RecordRTC(streamRef.current, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        const blobURL = URL.createObjectURL(blob);\n        setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n      });\n      setIsRecording(false);\n    }\n  };\n  const saveRecording = recordingURL => {\n    console.log('Saving recording:', recordingURL);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 4,\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      mb: 4,\n      textAlign: \"center\",\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      size: \"md\",\n      mb: 4,\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UnorderedList, {\n      styleType: \"none\",\n      pl: 0,\n      children: recordings.map((recording, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: recording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: \"blue\",\n          size: \"sm\",\n          onClick: () => saveRecording(recording),\n          mt: 2,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h2\",\n      size: \"md\",\n      mt: 8,\n      mb: 4,\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), isRecording ? /*#__PURE__*/_jsxDEV(Button, {\n      colorScheme: \"red\",\n      onClick: stopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      colorScheme: \"green\",\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LRPt5YlW63Volxnwc17g7Xzcwc8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","RecordRTC","Box","Heading","Button","UnorderedList","ListItem","Audio","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","recordings","setRecordings","mediaRecorderRef","streamRef","startRecording","current","navigator","mediaDevices","getUserMedia","audio","type","mimeType","error","console","stopRecording","blob","getBlob","blobURL","URL","createObjectURL","prevRecordings","saveRecording","recordingURL","log","p","children","as","mb","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","size","styleType","pl","map","recording","index","controls","src","colorScheme","onClick","mt","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new MediaRecorder(stream);\n//       mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n//       mediaRecorderRef.current.start();\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n//       mediaRecorderRef.current.stop();\n//     }\n//   };\n\n//   const handleDataAvailable = (event) => {\n//     if (event.data.size > 0) {\n//       chunksRef.current.push(event.data);\n//     }\n//   };\n\n//   const onSave = async () => {\n//     try {\n//       const blob = new Blob(chunksRef.current, { type: 'audio/webm' });\n//       const formData = new FormData();\n//       formData.append('recording', blob);\n//       console.log(\"form data\", formData)\n//       const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//         headers: { 'Content-Type': 'multipart/form-data' }\n//       });\n\n//       setRecordings(prevRecordings => [response.data, ...prevRecordings]);\n//       chunksRef.current = [];\n//     } catch (error) {\n//       console.error('Failed to save the recording:', error);\n//     }\n//   };\n\n//   const fetchRecordings = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/recordings');\n//       if (response.ok) {\n//         const data = await response.json();\n//         setRecordings(data);\n//       } else {\n//         throw new Error('Failed to fetch the recordings');\n//       }\n//     } catch (error) {\n//       console.error('Failed to fetch the recordings:', error);\n//     }\n//   };\n\n\n//   return (\n//     <div>\n//       <h1>Voice Recording Demo</h1>\n\n//       <button onClick={fetchRecordings}>Fetch Recordings</button>\n\n//       <h2>Recordings:</h2>\n//       <ul>\n//         {recordings.map(recording => (\n//           <li key={recording._id}>\n//             <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//             {console.log(\"path\", recording.path)}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <h2>Record:</h2>\n//       <button onClick={startRecording} type=\"button\">Start</button>\n//       <button onClick={stopRecording} type=\"button\">Stop</button>\n//       <button onClick={onSave} type=\"button\">Save</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport {\n  Box,\n  Heading,\n  Button,\n  UnorderedList,\n  ListItem,\n  Audio,\n} from '@chakra-ui/react';\n\nfunction App() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordings, setRecordings] = useState([]);\n\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n\n  const startRecording = async () => {\n    try {\n      streamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new RecordRTC(streamRef.current, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        const blobURL = URL.createObjectURL(blob);\n        setRecordings(prevRecordings => [...prevRecordings, blobURL]);\n      });\n      setIsRecording(false);\n    }\n  };\n\n  const saveRecording = (recordingURL) => {\n    console.log('Saving recording:', recordingURL);\n  };\n\n  return (\n    <Box p={4}>\n      <Heading as=\"h1\" mb={4} textAlign=\"center\">\n        Voice Recording Demo\n      </Heading>\n\n      <Heading as=\"h2\" size=\"md\" mb={4}>\n        Recordings:\n      </Heading>\n      <UnorderedList styleType=\"none\" pl={0}>\n        {recordings.map((recording, index) => (\n          <ListItem key={index} mb={2}>\n            <audio controls src={recording} />\n            <Button\n              colorScheme=\"blue\"\n              size=\"sm\"\n              onClick={() => saveRecording(recording)}\n              mt={2}\n            >\n              Save\n            </Button>\n          </ListItem>\n        ))}\n      </UnorderedList>\n\n      <Heading as=\"h2\" size=\"md\" mt={8} mb={4}>\n        Record:\n      </Heading>\n      {isRecording ? (\n        <Button colorScheme=\"red\" onClick={stopRecording}>\n          Stop Recording\n        </Button>\n      ) : (\n        <Button colorScheme=\"green\" onClick={startRecording}>\n          Start Recording\n        </Button>\n      )}\n    </Box>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}