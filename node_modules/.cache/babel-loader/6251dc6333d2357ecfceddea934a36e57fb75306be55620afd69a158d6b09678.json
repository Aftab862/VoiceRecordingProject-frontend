{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aafi\\\\Desktop\\\\Voice Demo App\\\\frontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   useEffect(() => {\n//     fetchRecordings();\n//   }, []);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//     const onSave = async () => {\n//       try {\n//         const formData = new FormData();\n//         chunksRef.current.forEach((chunk, index) => {\n//           formData.append('recording', chunk, `recording${index}.webm`);\n//         });\n//         const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//           headers: { 'Content-Type': 'multipart/form-data' },\n//         });\n\n//         setRecordings(prevRecordings => [...prevRecordings, response.data]);\n//         chunksRef.current = [];\n//       } catch (error) {\n//         console.error('Failed to save the recording:', error);\n//       }\n//     };\n\n//   const fetchRecordings = async () => {\n//         try {\n//           const response = await fetch('http://localhost:5000/api/recordings');\n//           if (response.ok) {\n//             const data = await response.json();\n//             setRecordings(data);\n//           } else {\n//             throw new Error('Failed to fetch the recordings');\n//           }\n//         } catch (error) {\n//           console.error('Failed to fetch the recordings:', error);\n//         }\n//       };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n//     console.log(\"recordings\",recordings)\n\n//     return (\n//       <ul>\n\n//         {recordings.map((recording, index) => (\n//           <li key={index}>\n//              <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {chunksRef.current.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n  useEffect(() => {\n    fetchRecordings();\n  }, []);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new RecordRTC(stream, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        chunksRef.current.push(blob);\n        setIsRecording(false);\n      });\n    }\n  };\n  const onSave = () => {\n    setRecordings(prevRecordings => [...prevRecordings, {\n      path: URL.createObjectURL(chunksRef.current[chunksRef.current.length - 1])\n    }]);\n    chunksRef.current = [];\n  };\n  const fetchRecordings = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/recordings');\n      setRecordings(response.data);\n    } catch (error) {\n      console.error('Failed to fetch the recordings:', error);\n    }\n  };\n  const renderRecordingsList = () => {\n    if (recordings.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No recordings available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recordings.map((recording, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: recording.path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: recording.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Voice Recording Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recordings:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), renderRecordingsList(), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Record:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this), chunksRef.current.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSave,\n      children: \"Save Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchRecordings,\n      children: \"Fetch Recordings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G7FyJlfBpwmWU4tH7aApqBVWvbY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","RecordRTC","axios","jsxDEV","_jsxDEV","App","_s","recordings","setRecordings","isRecording","setIsRecording","mediaRecorderRef","chunksRef","fetchRecordings","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","type","mimeType","error","console","stopRecording","blob","getBlob","push","onSave","prevRecordings","path","URL","createObjectURL","length","response","get","data","renderRecordingsList","children","fileName","_jsxFileName","lineNumber","columnNumber","map","recording","index","controls","src","filename","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Aafi/Desktop/Voice Demo App/frontEnd/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import RecordRTC from 'recordrtc';\n// import axios from 'axios';\n\n// import './App.css';\n\n// function App() {\n//   const [recordings, setRecordings] = useState([]);\n//   const [isRecording, setIsRecording] = useState(false);\n//   const mediaRecorderRef = useRef(null);\n//   const chunksRef = useRef([]);\n\n//   useEffect(() => {\n//     fetchRecordings();\n//   }, []);\n\n//   const startRecording = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//       mediaRecorderRef.current = new RecordRTC(stream, {\n//         type: 'audio',\n//         mimeType: 'audio/webm'\n//       });\n//       mediaRecorderRef.current.startRecording();\n//       setIsRecording(true);\n//     } catch (error) {\n//       console.error('Failed to start recording:', error);\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     if (mediaRecorderRef.current) {\n//       mediaRecorderRef.current.stopRecording(() => {\n//         const blob = mediaRecorderRef.current.getBlob();\n//         chunksRef.current.push(blob);\n//         setIsRecording(false);\n//       });\n//     }\n//   };\n\n//     const onSave = async () => {\n//       try {\n//         const formData = new FormData();\n//         chunksRef.current.forEach((chunk, index) => {\n//           formData.append('recording', chunk, `recording${index}.webm`);\n//         });\n//         const response = await axios.post('http://localhost:5000/api/upload', formData, {\n//           headers: { 'Content-Type': 'multipart/form-data' },\n//         });\n    \n//         setRecordings(prevRecordings => [...prevRecordings, response.data]);\n//         chunksRef.current = [];\n//       } catch (error) {\n//         console.error('Failed to save the recording:', error);\n//       }\n//     };\n    \n\n//   const fetchRecordings = async () => {\n//         try {\n//           const response = await fetch('http://localhost:5000/api/recordings');\n//           if (response.ok) {\n//             const data = await response.json();\n//             setRecordings(data);\n//           } else {\n//             throw new Error('Failed to fetch the recordings');\n//           }\n//         } catch (error) {\n//           console.error('Failed to fetch the recordings:', error);\n//         }\n//       };\n\n//   const renderRecordingsList = () => {\n//     if (recordings.length === 0) {\n//       return <p>No recordings available.</p>;\n//     }\n//     console.log(\"recordings\",recordings)\n\n//     return (\n//       <ul>\n        \n//         {recordings.map((recording, index) => (\n//           <li key={index}>\n//              <audio controls src={`http://localhost:5000/${recording.path}`} />\n//             <p>{recording.filename}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1>Voice Recording Demo</h1>\n\n//       <h2>Recordings:</h2>\n//       {renderRecordingsList()}\n\n//       <h2>Record:</h2>\n//       {!isRecording ? (\n//         <button onClick={startRecording}>Start Recording</button>\n//       ) : (\n//         <button onClick={stopRecording}>Stop Recording</button>\n//       )}\n//       {chunksRef.current.length > 0 && (\n//         <button onClick={onSave}>Save Recording</button>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport RecordRTC from 'recordrtc';\nimport axios from 'axios';\n\nimport './App.css';\n\nfunction App() {\n  const [recordings, setRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  useEffect(() => {\n    fetchRecordings();\n  }, []);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new RecordRTC(stream, {\n        type: 'audio',\n        mimeType: 'audio/webm'\n      });\n      mediaRecorderRef.current.startRecording();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stopRecording(() => {\n        const blob = mediaRecorderRef.current.getBlob();\n        chunksRef.current.push(blob);\n        setIsRecording(false);\n      });\n    }\n  };\n\n  const onSave = () => {\n    setRecordings(prevRecordings => [\n      ...prevRecordings,\n      { path: URL.createObjectURL(chunksRef.current[chunksRef.current.length - 1]) }\n    ]);\n    chunksRef.current = [];\n  };\n\n  const fetchRecordings = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/recordings');\n      setRecordings(response.data);\n    } catch (error) {\n      console.error('Failed to fetch the recordings:', error);\n    }\n  };\n\n  const renderRecordingsList = () => {\n    if (recordings.length === 0) {\n      return <p>No recordings available.</p>;\n    }\n\n    return (\n      <ul>\n        {recordings.map((recording, index) => (\n          <li key={index}>\n            <audio controls src={recording.path} />\n            <p>{recording.filename}</p>\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Voice Recording Demo</h1>\n\n      <h2>Recordings:</h2>\n      {renderRecordingsList()}\n\n      <h2>Record:</h2>\n      {!isRecording ? (\n        <button onClick={startRecording}>Start Recording</button>\n      ) : (\n        <button onClick={stopRecording}>Stop Recording</button>\n      )}\n      {chunksRef.current.length > 0 && (\n        <button onClick={onSave}>Save Recording</button>\n      )}\n\n      <button onClick={fetchRecordings}>Fetch Recordings</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMa,gBAAgB,GAAGX,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMY,SAAS,GAAGZ,MAAM,CAAC,EAAE,CAAC;EAE5BD,SAAS,CAAC,MAAM;IACdc,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzER,gBAAgB,CAACS,OAAO,GAAG,IAAInB,SAAS,CAACc,MAAM,EAAE;QAC/CM,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFX,gBAAgB,CAACS,OAAO,CAACN,cAAc,CAAC,CAAC;MACzCJ,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAId,gBAAgB,CAACS,OAAO,EAAE;MAC5BT,gBAAgB,CAACS,OAAO,CAACK,aAAa,CAAC,MAAM;QAC3C,MAAMC,IAAI,GAAGf,gBAAgB,CAACS,OAAO,CAACO,OAAO,CAAC,CAAC;QAC/Cf,SAAS,CAACQ,OAAO,CAACQ,IAAI,CAACF,IAAI,CAAC;QAC5BhB,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMmB,MAAM,GAAGA,CAAA,KAAM;IACnBrB,aAAa,CAACsB,cAAc,IAAI,CAC9B,GAAGA,cAAc,EACjB;MAAEC,IAAI,EAAEC,GAAG,CAACC,eAAe,CAACrB,SAAS,CAACQ,OAAO,CAACR,SAAS,CAACQ,OAAO,CAACc,MAAM,GAAG,CAAC,CAAC;IAAE,CAAC,CAC/E,CAAC;IACFtB,SAAS,CAACQ,OAAO,GAAG,EAAE;EACxB,CAAC;EAED,MAAMP,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMsB,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAAC,sCAAsC,CAAC;MACxE5B,aAAa,CAAC2B,QAAQ,CAACE,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,MAAMe,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI/B,UAAU,CAAC2B,MAAM,KAAK,CAAC,EAAE;MAC3B,oBAAO9B,OAAA;QAAAmC,QAAA,EAAG;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACxC;IAEA,oBACEvC,OAAA;MAAAmC,QAAA,EACGhC,UAAU,CAACqC,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,kBAC/B1C,OAAA;QAAAmC,QAAA,gBACEnC,OAAA;UAAO2C,QAAQ;UAACC,GAAG,EAAEH,SAAS,CAACd;QAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACvCvC,OAAA;UAAAmC,QAAA,EAAIM,SAAS,CAACI;QAAQ;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFpBG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAET,CAAC;EAED,oBACEvC,OAAA;IAAK8C,SAAS,EAAC,eAAe;IAAAX,QAAA,gBAC5BnC,OAAA;MAAAmC,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7BvC,OAAA;MAAAmC,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBL,oBAAoB,CAAC,CAAC,eAEvBlC,OAAA;MAAAmC,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACf,CAAClC,WAAW,gBACXL,OAAA;MAAQ+C,OAAO,EAAErC,cAAe;MAAAyB,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAEzDvC,OAAA;MAAQ+C,OAAO,EAAE1B,aAAc;MAAAc,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACvD,EACA/B,SAAS,CAACQ,OAAO,CAACc,MAAM,GAAG,CAAC,iBAC3B9B,OAAA;MAAQ+C,OAAO,EAAEtB,MAAO;MAAAU,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAChD,eAEDvC,OAAA;MAAQ+C,OAAO,EAAEtC,eAAgB;MAAA0B,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV;AAACrC,EAAA,CAxFQD,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AA0FZ,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}